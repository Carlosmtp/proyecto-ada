- Inicia GUI
  Inputs
  - Ingrese el total de animales a participar en la presentación del zoológico. (n)
  - Ingrese el total de partes que abrá en el espectáculo. (m)
  - Ingrese el total de escenas que habrá en las partes (exeptuando la apertura 
    donde se presentarán todas las escenas). (k)
  - Ingrese los animales y su respectiva grandeza, recuerde que no se pueden repetir animales ni grandezas
       Nombre del primer animal...
       Grandeza del primer animal...  
       Nombre del segundo animal...
       Grandeza del segundo animal...  
       Esto se repite hasta que sean n animales.

  - Ingrese las escenas con sus respectivos animales.
    Recuerde que cada escena debe tener exactamente 3 animales y deben existir exactamente (m - 1)*k escenas
      animales a participar en la escena 1
      animales a participar en la escena 2
      Hasta que sean (m - 1)*k escenas

  - Ingrese que escenas estarán en cada una de las m-1 partes, Recuerde que cada parte tendrá 
    exactamente k escenas.
    Escenas para la primera parte...
    Escenas para la segunda parte...
    Hasta que sean m-1 partes.

Posible implementación

  - Crear una clase que se llame Animal, el cual contedrá un atributo que se llame tipo-animal el cual 
    almacenará el nombre del animal y un atributo que se llame grandeza el cual almacenará la grandeza 
    del animal.
  - Crear una clase que se llame Escena, que contedrá una estrucutura para almacenar los 3 animales 
    y un atributo entero que almacenará la grandeza total de la escena.
  - Crear una clase que se llame Parte, que contedrá un atributo llamado escenas que será una estructura
    para almacenar las k escenas y un atributo para almacenar la grandeza total de la parte. Si 
    una de las partes es la apertura, el atributo escenas almacenará (m-1)*k escenas.
  - Crear una clase que se llame Espectáculo, que contendrá una estructura para almacenar las 
    partes y un atributo para almacenar el promedio de la grandeza total del espectáculo.

    Posibles estructuras.

  - Árbol binario de busqueda | Árbol rojo y negro (Se garantiza que sea de altura logarítmica)
  - Árboles binarios de búsqueda (Buscando que sea árbol completo)
  - Clase Nodo - Atributos key, padre, hijoizq, hijoder,
  - Clase ArbolBinarioBusqueda - raíz

    Para hallar el elemento repetido, la complejidad mínima será lineal. Ya que todo elemento 
    Se puede hacer un recorrido inorder del árbol, añadir una 

    Tabla hash

    
    arreglos, se puede aplicar counting sort ya que los elemento de la grandeza van de 1 hasta n



